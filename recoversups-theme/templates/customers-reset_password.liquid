{% comment %}
  Customer Reset Password Page - Recoversups
  Página de recuperación de contraseña
{% endcomment %}

{{ 'auth-forms.scss' | asset_url | stylesheet_tag }}

<div class="auth-page">
  <div class="container">
    <div class="auth-container">
      <!-- Auth Header -->
      <div class="auth-header">
        <div class="auth-logo">
          <a href="{{ routes.root_url }}">
            <img src="{{ 'logo.svg' | asset_url }}" alt="Recoversups" loading="eager">
          </a>
        </div>
        <h1 class="auth-title">Recuperar Contraseña</h1>
        <p class="auth-subtitle">Ingresa tu nueva contraseña para acceder a tu cuenta</p>
      </div>

      <!-- Reset Password Form -->
      <div class="auth-form-container">
        <div class="auth-form-panel active">
          {% form 'reset_customer_password', id: 'reset-password-form' %}
            <div class="form-errors">
              {% if form.errors %}
                <div class="error-message">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="15" y1="9" x2="9" y2="15"></line>
                    <line x1="9" y1="9" x2="15" y2="15"></line>
                  </svg>
                  <div class="error-content">
                    <h3>Error al restablecer contraseña</h3>
                    <ul>
                      {% for error in form.errors %}
                        <li>{{ error }}</li>
                      {% endfor %}
                    </ul>
                  </div>
                </div>
              {% endif %}
            </div>

            <div class="form-group">
              <label for="customer-password" class="form-label">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                  <path d="M7,11V7a5,5 0,0 1,10 0v4"></path>
                </svg>
                Nueva Contraseña
              </label>
              <div class="password-input-wrapper">
                <input type="password" 
                       id="customer-password" 
                       name="customer[password]" 
                       class="form-input password-input"
                       placeholder="Mínimo 8 caracteres"
                       required
                       autocomplete="new-password"
                       minlength="8">
                <button type="button" class="password-toggle" onclick="togglePassword('customer-password')">
                  <svg class="password-show" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M1,12s4,-8 11,-8 11,8 11,8 -4,8 -11,8 -11,-8 -11,-8z"></path>
                    <circle cx="12" cy="12" r="3"></circle>
                  </svg>
                  <svg class="password-hide" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
                    <path d="M17.94,17.94A10.07,10.07 0,0 1,12 20c-7,0 -11,-8 -11,-8a18.45,18.45 0,0 1,5.06 -5.94M9.9,4.24A9.12,9.12 0,0 1,12 4c7,0 11,8 11,8a18.5,18.5 0,0 1,-2.16 3.19m-6.72,-1.07a3,3 0,1 1,-4.24 -4.24"></path>
                    <line x1="1" y1="1" x2="23" y2="23"></line>
                  </svg>
                </button>
              </div>
              <div class="password-strength" id="password-strength"></div>
            </div>

            <div class="form-group">
              <label for="customer-password-confirmation" class="form-label">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                  <path d="M7,11V7a5,5 0,0 1,10 0v4"></path>
                </svg>
                Confirmar Contraseña
              </label>
              <div class="password-input-wrapper">
                <input type="password" 
                       id="customer-password-confirmation" 
                       name="customer[password_confirmation]" 
                       class="form-input password-input"
                       placeholder="Confirma tu contraseña"
                       required
                       autocomplete="new-password"
                       minlength="8">
                <button type="button" class="password-toggle" onclick="togglePassword('customer-password-confirmation')">
                  <svg class="password-show" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M1,12s4,-8 11,-8 11,8 11,8 -4,8 -11,8 -11,-8 -11,-8z"></path>
                    <circle cx="12" cy="12" r="3"></circle>
                  </svg>
                  <svg class="password-hide" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
                    <path d="M17.94,17.94A10.07,10.07 0,0 1,12 20c-7,0 -11,-8 -11,-8a18.45,18.45 0,0 1,5.06 -5.94M9.9,4.24A9.12,9.12 0,0 1,12 4c7,0 11,8 11,8a18.5,18.5 0,0 1,-2.16 3.19m-6.72,-1.07a3,3 0,1 1,-4.24 -4.24"></path>
                    <line x1="1" y1="1" x2="23" y2="23"></line>
                  </svg>
                </button>
              </div>
              <div class="password-match" id="password-match"></div>
            </div>

            <div class="password-requirements">
              <h4>Requisitos de contraseña:</h4>
              <ul class="requirements-list">
                <li data-requirement="length">Mínimo 8 caracteres</li>
                <li data-requirement="uppercase">Una letra mayúscula</li>
                <li data-requirement="lowercase">Una letra minúscula</li>
                <li data-requirement="number">Un número</li>
                <li data-requirement="special">Un carácter especial</li>
              </ul>
            </div>

            <button type="submit" class="btn btn-primary btn-auth">
              <span class="btn-text">Restablecer Contraseña</span>
              <div class="btn-loading" style="display: none;">
                <div class="loading-spinner"></div>
              </div>
            </button>
          {% endform %}
        </div>
      </div>

      <!-- Auth Footer -->
      <div class="auth-footer">
        <div class="auth-help">
          <p>¿Recordaste tu contraseña? <a href="{{ routes.account_login_url }}">Iniciar sesión</a></p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const passwordInput = document.getElementById('customer-password');
  const confirmInput = document.getElementById('customer-password-confirmation');
  const submitBtn = document.querySelector('.btn-auth');
  
  // Password validation
  passwordInput.addEventListener('input', function() {
    validatePassword(this.value);
    checkPasswordMatch();
  });
  
  confirmInput.addEventListener('input', function() {
    checkPasswordMatch();
  });
  
  // Form submission
  document.querySelector('form').addEventListener('submit', function(e) {
    if (!validateForm()) {
      e.preventDefault();
      return;
    }
    
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = submitBtn.querySelector('.btn-loading');
    
    btnText.style.display = 'none';
    btnLoading.style.display = 'inline-block';
    submitBtn.disabled = true;
  });
  
  function validatePassword(password) {
    const requirements = {
      length: password.length >= 8,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /[0-9]/.test(password),
      special: /[^A-Za-z0-9]/.test(password)
    };
    
    // Update requirements UI
    Object.keys(requirements).forEach(req => {
      const element = document.querySelector(`[data-requirement="${req}"]`);
      if (element) {
        element.classList.toggle('valid', requirements[req]);
      }
    });
    
    // Update strength indicator
    const validCount = Object.values(requirements).filter(Boolean).length;
    updatePasswordStrength(validCount);
    
    return Object.values(requirements).every(Boolean);
  }
  
  function updatePasswordStrength(validCount) {
    const strengthIndicator = document.getElementById('password-strength');
    if (!strengthIndicator) return;
    
    let strengthText = '';
    let strengthClass = '';
    
    if (validCount === 0) {
      strengthText = '';
      strengthClass = '';
    } else if (validCount <= 2) {
      strengthText = 'Débil';
      strengthClass = 'weak';
    } else if (validCount <= 3) {
      strengthText = 'Regular';
      strengthClass = 'medium';
    } else if (validCount <= 4) {
      strengthText = 'Buena';
      strengthClass = 'good';
    } else {
      strengthText = 'Muy fuerte';
      strengthClass = 'strong';
    }
    
    strengthIndicator.innerHTML = strengthText ? `
      <div class="strength-indicator ${strengthClass}">
        <div class="strength-bar">
          <div class="strength-fill" style="width: ${(validCount / 5) * 100}%"></div>
        </div>
        <span class="strength-text">${strengthText}</span>
      </div>
    ` : '';
  }
  
  function checkPasswordMatch() {
    const password = passwordInput.value;
    const confirm = confirmInput.value;
    const matchIndicator = document.getElementById('password-match');
    
    if (!confirm) {
      matchIndicator.innerHTML = '';
      return;
    }
    
    const matches = password === confirm;
    matchIndicator.innerHTML = matches ? 
      '<div class="password-match-success">✓ Las contraseñas coinciden</div>' :
      '<div class="password-match-error">✗ Las contraseñas no coinciden</div>';
    
    return matches;
  }
  
  function validateForm() {
    const password = passwordInput.value;
    const confirm = confirmInput.value;
    
    // Check password requirements
    if (!validatePassword(password)) {
      alert('La contraseña no cumple con los requisitos');
      return false;
    }
    
    // Check password match
    if (password !== confirm) {
      alert('Las contraseñas no coinciden');
      return false;
    }
    
    return true;
  }
});

function togglePassword(inputId) {
  const input = document.getElementById(inputId);
  const toggle = input.nextElementSibling;
  const showIcon = toggle.querySelector('.password-show');
  const hideIcon = toggle.querySelector('.password-hide');
  
  if (input.type === 'password') {
    input.type = 'text';
    showIcon.style.display = 'none';
    hideIcon.style.display = 'block';
  } else {
    input.type = 'password';
    showIcon.style.display = 'block';
    hideIcon.style.display = 'none';
  }
}
</script>

{% comment %} Include form validation for password reset form {% endcomment %}
{% render 'form-validation', validation_type: 'password_reset', form_id: 'reset-password-form', include_password_strength: true, include_password_match: true %}