{% comment %}
  Página de Colección - Recoversups
  Template para listado de productos con filtros avanzados
  Sistema de navegación y búsqueda implementado
{% endcomment %}

<div class="collection-page">
  <div class="container">
    <!-- Breadcrumbs -->
    <nav class="breadcrumbs" aria-label="Navegación de ruta">
      <ol class="breadcrumb-list">
        <li class="breadcrumb-item">
          <a href="{{ routes.root_url }}">Inicio</a>
        </li>
        <li class="breadcrumb-item">
          <a href="{{ routes.collections_url }}">Colecciones</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
          {{ collection.title }}
        </li>
      </ol>
    </nav>

    <!-- Collection Header -->
    <div class="collection-header">
      <div class="collection-info">
        <h1 class="collection-title">{{ collection.title }}</h1>
        {% if collection.description != blank %}
          <div class="collection-description">
            {{ collection.description }}
          </div>
        {% endif %}
        <div class="collection-count">
          <span class="product-count">{{ collection.products.size }}</span> productos encontrados
        </div>
      </div>
      
      {% if collection.image %}
        <div class="collection-image">
          <img src="{{ collection.image | img_url: '400x400' }}" 
               alt="{{ collection.title }}" 
               loading="lazy">
        </div>
      {% endif %}
    </div>

    <div class="collection-content">
      <!-- Filters Sidebar -->
      <aside class="filters-sidebar">
        <div class="filters-header">
          <h3 class="filters-title">Filtros</h3>
          <button class="filters-clear" onclick="clearAllFilters()">
            Limpiar todo
          </button>
        </div>

        <!-- Search Filter -->
        <div class="filter-group">
          <label for="product-search" class="filter-label">Buscar productos</label>
          <div class="search-input-wrapper">
            <input type="text" 
                   id="product-search" 
                   class="search-input" 
                   placeholder="Buscar en {{ collection.title }}"
                   onkeyup="filterProducts()">
            <button class="search-btn" onclick="filterProducts()">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
            </button>
          </div>
        </div>

        <!-- Price Filter -->
        <div class="filter-group">
          <h4 class="filter-title">Precio</h4>
          <div class="price-range">
            <div class="price-inputs">
              <input type="number" 
                     id="price-min" 
                     class="price-input" 
                     placeholder="Min"
                     onchange="filterByPrice()">
              <span class="price-separator">-</span>
              <input type="number" 
                     id="price-max" 
                     class="price-input" 
                     placeholder="Max"
                     onchange="filterByPrice()">
            </div>
            <div class="price-suggestions">
              <button class="price-tag" onclick="setPriceRange(0, 50)">S/ 0 - 50</button>
              <button class="price-tag" onclick="setPriceRange(50, 100)">S/ 50 - 100</button>
              <button class="price-tag" onclick="setPriceRange(100, 200)">S/ 100 - 200</button>
              <button class="price-tag" onclick="setPriceRange(200, 500)">S/ 200+</button>
            </div>
          </div>
        </div>

        <!-- Category Filter -->
        <div class="filter-group">
          <h4 class="filter-title">Categorías</h4>
          <div class="filter-options">
            {% for product_type in collection.all_types %}
              <label class="filter-checkbox">
                <input type="checkbox" 
                       name="category" 
                       value="{{ product_type | handle }}"
                       onchange="filterByCategory()">
                <span class="checkbox-label">{{ product_type }}</span>
                <span class="checkbox-count">({{ collection.products | where: 'type', product_type | size }})</span>
              </label>
            {% endfor %}
          </div>
        </div>

        <!-- Brand Filter -->
        <div class="filter-group">
          <h4 class="filter-title">Marcas</h4>
          <div class="filter-options">
            {% assign brands = collection.products | map: 'vendor' | uniq | sort %}
            {% for brand in brands %}
              <label class="filter-checkbox">
                <input type="checkbox" 
                       name="brand" 
                       value="{{ brand | handle }}"
                       onchange="filterByBrand()">
                <span class="checkbox-label">{{ brand }}</span>
                <span class="checkbox-count">({{ collection.products | where: 'vendor', brand | size }})</span>
              </label>
            {% endfor %}
          </div>
        </div>

        <!-- Tags Filter -->
        <div class="filter-group">
          <h4 class="filter-title">Características</h4>
          <div class="filter-options">
            {% assign popular_tags = 'sin-gluten,vegano,organico,proteina,creatina,pre-entreno,post-entreno,bcaa' | split: ',' %}
            {% for tag in popular_tags %}
              {% assign products_with_tag = collection.products | where: 'tags', tag %}
              {% if products_with_tag.size > 0 %}
                <label class="filter-checkbox">
                  <input type="checkbox" 
                         name="tags" 
                         value="{{ tag }}"
                         onchange="filterByTags()">
                  <span class="checkbox-label">{{ tag | capitalize }}</span>
                  <span class="checkbox-count">({{ products_with_tag.size }})</span>
                </label>
              {% endif %}
            {% endfor %}
          </div>
        </div>

        <!-- Rating Filter -->
        <div class="filter-group">
          <h4 class="filter-title">Calificación</h4>
          <div class="rating-filters">
            {% for rating in (4..5) %}
              <label class="filter-checkbox">
                <input type="checkbox" 
                       name="rating" 
                       value="{{ rating }}"
                       onchange="filterByRating()">
                <span class="checkbox-label">
                  <div class="rating-display">
                    {% for i in (1..5) %}
                      <span class="star {% if i <= rating %}star--filled{% endif %}">★</span>
                    {% endfor %}
                    y más
                  </div>
                </span>
              </label>
            {% endfor %}
          </div>
        </div>
      </aside>

      <!-- Products Grid -->
      <main class="products-section">
        <!-- Toolbar -->
        <div class="products-toolbar">
          <div class="toolbar-left">
            <button class="filters-toggle" onclick="toggleFilters()">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46"></polygon>
              </svg>
              Filtros
            </button>
            <span class="results-count">
              Mostrando <span id="visible-count">{{ collection.products.size }}</span> de {{ collection.products.size }} productos
            </span>
          </div>

          <div class="toolbar-right">
            <div class="sort-dropdown">
              <label for="sort-select">Ordenar por:</label>
              <select id="sort-select" onchange="sortProducts()">
                <option value="featured">Destacados</option>
                <option value="price-low">Precio: Menor a Mayor</option>
                <option value="price-high">Precio: Mayor a Menor</option>
                <option value="name-asc">Nombre: A-Z</option>
                <option value="name-desc">Nombre: Z-A</option>
                <option value="date-new">Más Recientes</option>
                <option value="rating">Mejor Calificados</option>
              </select>
            </div>

            <div class="view-toggle">
              <button class="view-btn view-btn--grid active" onclick="setView('grid')" title="Vista en grilla">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="3" width="7" height="7"></rect>
                  <rect x="14" y="3" width="7" height="7"></rect>
                  <rect x="14" y="14" width="7" height="7"></rect>
                  <rect x="3" y="14" width="7" height="7"></rect>
                </svg>
              </button>
              <button class="view-btn view-btn--list" onclick="setView('list')" title="Vista en lista">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="8" y1="6" x2="21" y2="6"></line>
                  <line x1="8" y1="12" x2="21" y2="12"></line>
                  <line x1="8" y1="18" x2="21" y2="18"></line>
                  <line x1="3" y1="6" x2="3.01" y2="6"></line>
                  <line x1="3" y1="12" x2="3.01" y2="12"></line>
                  <line x1="3" y1="18" x2="3.01" y2="18"></line>
                </svg>
              </button>
            </div>
          </div>
        </div>

        <!-- Products Grid -->
        <div class="products-grid" id="products-grid">
          {% for product in collection.products %}
            <div class="product-item" 
                 data-price="{{ product.price | money_without_currency }}"
                 data-name="{{ product.title | downcase }}"
                 data-type="{{ product.type | handle }}"
                 data-vendor="{{ product.vendor | handle }}"
                 data-tags="{{ product.tags | join: ',' | downcase }}"
                 data-rating="{{ product.metafields.reviews.rating.value | default: 4.5 }}"
                 data-date="{{ product.created_at | date: '%Y%m%d' }}">
              
              {% render 'product-card', product: product %}
            </div>
          {% endfor %}
        </div>

        <!-- No Results Message -->
        <div class="no-results" id="no-results" style="display: none;">
          <div class="no-results-content">
            <svg class="no-results-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
            <h3>No se encontraron productos</h3>
            <p>Intenta ajustar los filtros o buscar con términos diferentes</p>
            <button class="btn btn-primary" onclick="clearAllFilters()">
              Limpiar filtros
            </button>
          </div>
        </div>

        <!-- Pagination -->
        <div class="pagination-wrapper">
          {% paginate collection.products by 24 %}
            <nav class="pagination" aria-label="Navegación de páginas">
              {% if paginate.previous %}
                <a href="{{ paginate.previous.url }}" class="pagination-btn pagination-prev">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="15,18 9,12 15,6"></polyline>
                  </svg>
                  Anterior
                </a>
              {% endif %}

              <ul class="pagination-list">
                {% for part in paginate.parts %}
                  {% if part.is_link %}
                    <li>
                      <a href="{{ part.url }}" class="pagination-link">{{ part.title }}</a>
                    </li>
                  {% else %}
                    <li>
                      <span class="pagination-current">{{ part.title }}</span>
                    </li>
                  {% endif %}
                {% endfor %}
              </ul>

              {% if paginate.next %}
                <a href="{{ paginate.next.url }}" class="pagination-btn pagination-next">
                  Siguiente
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="9,18 15,12 9,6"></polyline>
                  </svg>
                </a>
              {% endif %}
            </nav>
          {% endpaginate %}
        </div>
      </main>
    </div>
  </div>
</div>

<!-- Filter and Sort JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const productsGrid = document.getElementById('products-grid');
  const noResults = document.getElementById('no-results');
  const visibleCount = document.getElementById('visible-count');
  const filtersSidebar = document.querySelector('.filters-sidebar');
  
  // Store original products for filtering
  const originalProducts = Array.from(document.querySelectorAll('.product-item'));
  
  // Filter functions
  window.filterProducts = function() {
    const searchTerm = document.getElementById('product-search').value.toLowerCase();
    filterBySearch(searchTerm);
  };
  
  window.filterByPrice = function() {
    const minPrice = parseFloat(document.getElementById('price-min').value) || 0;
    const maxPrice = parseFloat(document.getElementById('price-max').value) || Infinity;
    
    originalProducts.forEach(product => {
      const price = parseFloat(product.dataset.price);
      const matchesPrice = price >= minPrice && price <= maxPrice;
      
      if (matchesPrice) {
        product.style.display = 'block';
      } else {
        product.style.display = 'none';
      }
    });
    
    updateResultsCount();
  };
  
  window.setPriceRange = function(min, max) {
    document.getElementById('price-min').value = min;
    document.getElementById('price-max').value = max === 500 ? '' : max;
    filterByPrice();
  };
  
  window.filterByCategory = function() {
    const selectedCategories = Array.from(document.querySelectorAll('input[name="category"]:checked'))
      .map(cb => cb.value);
    
    if (selectedCategories.length === 0) {
      originalProducts.forEach(product => product.style.display = 'block');
    } else {
      originalProducts.forEach(product => {
        const productType = product.dataset.type;
        const matches = selectedCategories.includes(productType);
        product.style.display = matches ? 'block' : 'none';
      });
    }
    
    updateResultsCount();
  };
  
  window.filterByBrand = function() {
    const selectedBrands = Array.from(document.querySelectorAll('input[name="brand"]:checked'))
      .map(cb => cb.value);
    
    if (selectedBrands.length === 0) {
      originalProducts.forEach(product => product.style.display = 'block');
    } else {
      originalProducts.forEach(product => {
        const productBrand = product.dataset.vendor;
        const matches = selectedBrands.includes(productBrand);
        product.style.display = matches ? 'block' : 'none';
      });
    }
    
    updateResultsCount();
  };
  
  window.filterByTags = function() {
    const selectedTags = Array.from(document.querySelectorAll('input[name="tags"]:checked'))
      .map(cb => cb.value);
    
    if (selectedTags.length === 0) {
      originalProducts.forEach(product => product.style.display = 'block');
    } else {
      originalProducts.forEach(product => {
        const productTags = product.dataset.tags.split(',');
        const matches = selectedTags.some(tag => productTags.includes(tag));
        product.style.display = matches ? 'block' : 'none';
      });
    }
    
    updateResultsCount();
  };
  
  window.filterByRating = function() {
    const selectedRatings = Array.from(document.querySelectorAll('input[name="rating"]:checked'))
      .map(cb => parseFloat(cb.value));
    
    if (selectedRatings.length === 0) {
      originalProducts.forEach(product => product.style.display = 'block');
    } else {
      originalProducts.forEach(product => {
        const productRating = parseFloat(product.dataset.rating);
        const matches = selectedRatings.some(rating => productRating >= rating);
        product.style.display = matches ? 'block' : 'none';
      });
    }
    
    updateResultsCount();
  };
  
  function filterBySearch(searchTerm) {
    originalProducts.forEach(product => {
      const productName = product.dataset.name;
      const matches = productName.includes(searchTerm);
      product.style.display = matches ? 'block' : 'none';
    });
    
    updateResultsCount();
  }
  
  // Sort function
  window.sortProducts = function() {
    const sortValue = document.getElementById('sort-select').value;
    const visibleProducts = Array.from(document.querySelectorAll('.product-item:not([style*="display: none"])'));
    
    visibleProducts.sort((a, b) => {
      switch(sortValue) {
        case 'price-low':
          return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
        case 'price-high':
          return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
        case 'name-asc':
          return a.dataset.name.localeCompare(b.dataset.name);
        case 'name-desc':
          return b.dataset.name.localeCompare(a.dataset.name);
        case 'date-new':
          return parseInt(b.dataset.date) - parseInt(a.dataset.date);
        case 'rating':
          return parseFloat(b.dataset.rating) - parseFloat(a.dataset.rating);
        default:
          return 0;
      }
    });
    
    // Reorder in DOM
    visibleProducts.forEach(product => {
      productsGrid.appendChild(product);
    });
  };
  
  // View toggle
  window.setView = function(view) {
    const gridBtn = document.querySelector('.view-btn--grid');
    const listBtn = document.querySelector('.view-btn--list');
    
    if (view === 'grid') {
      productsGrid.classList.remove('products-grid--list');
      gridBtn.classList.add('active');
      listBtn.classList.remove('active');
    } else {
      productsGrid.classList.add('products-grid--list');
      listBtn.classList.add('active');
      gridBtn.classList.remove('active');
    }
  };
  
  // Toggle filters sidebar
  window.toggleFilters = function() {
    filtersSidebar.classList.toggle('filters-sidebar--open');
  };
  
  // Clear all filters
  window.clearAllFilters = function() {
    // Clear checkboxes
    document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
    
    // Clear price inputs
    document.getElementById('price-min').value = '';
    document.getElementById('price-max').value = '';
    
    // Clear search
    document.getElementById('product-search').value = '';
    
    // Show all products
    originalProducts.forEach(product => product.style.display = 'block');
    
    // Reset sort
    document.getElementById('sort-select').value = 'featured';
    
    updateResultsCount();
  };
  
  // Update results count
  function updateResultsCount() {
    const visibleProducts = document.querySelectorAll('.product-item:not([style*="display: none"])');
    visibleCount.textContent = visibleProducts.length;
    
    // Show/hide no results message
    if (visibleProducts.length === 0) {
      noResults.style.display = 'block';
    } else {
      noResults.style.display = 'none';
    }
  }
});
</script>